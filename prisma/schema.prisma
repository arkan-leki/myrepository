// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String  @id @default(cuid())
  userId        String
  role          Role    @default(ADMIN)
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  accounts Account[]
  sessions Session[]
  Order    Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id      String  @id @default(cuid())
  address String  @unique
  name    String?
  posts   Order[]
}

model Order {
  id         String           @id @default(cuid())
  title      String
  total      String           @default("0")
  products   ProductOnPosts[]
  createdAt  DateTime         @default(now())
  published  Boolean          @default(false)
  author     User             @relation(fields: [authorId], references: [id])
  authorId   String
  customer   Customer         @relation(fields: [customerId], references: [id])
  customerId String
}

model Device {
  id             String           @id @default(cuid())
  code           String
  price          String
  stock          Boolean
  product        Product          @relation(fields: [productId], references: [id])
  productId      String // relation scalar field (used in the `@relation` attribute above)
  ProductOnPosts ProductOnPosts[]
}

model Brand {
  id      String    @id @default(cuid())
  name    String
  product Product[]
}

model Product {
  id       String           @id @default(cuid())
  name     String
  price    String?
  quantity String?
  brand    Brand            @relation(fields: [brandId], references: [id])
  brandId  String // relation scalar field (used in the `@relation` attribute above)
  posts    ProductOnPosts[]
  devices  Device[]
}

model ProductOnPosts {
  price      String
  quantity   String
  total      String   @default("0")
  post       Order    @relation(fields: [postId], references: [id])
  postId     String // relation scalar field (used in the `@relation` attribute above)
  product    Product  @relation(fields: [productId], references: [id])
  productId  String // relation scalar field (used in the `@relation` attribute above)
  device     Device   @relation(fields: [deviceId], references: [id])
  deviceId   String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, deviceId])
}

enum Role {
  USER
  ADMIN
}
